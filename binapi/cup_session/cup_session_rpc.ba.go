// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

package cup_session

import (
	"context"

	api "go.fd.io/govpp/api"
)

// RPCService defines RPC service cup_session.
type RPCService interface {
	CupAddDelSession(ctx context.Context, in *CupAddDelSession) (*CupAddDelSessionReply, error)
	CupDumpMeasurement(ctx context.Context, in *CupDumpMeasurement) (*CupDumpMeasurementReply, error)
	CupUpdateSession(ctx context.Context, in *CupUpdateSession) (*CupUpdateSessionReply, error)
}

type serviceClient struct {
	conn api.Connection
}

func NewServiceClient(conn api.Connection) RPCService {
	return &serviceClient{conn}
}

func (c *serviceClient) CupAddDelSession(ctx context.Context, in *CupAddDelSession) (*CupAddDelSessionReply, error) {
	out := new(CupAddDelSessionReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) CupDumpMeasurement(ctx context.Context, in *CupDumpMeasurement) (*CupDumpMeasurementReply, error) {
	out := new(CupDumpMeasurementReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) CupUpdateSession(ctx context.Context, in *CupUpdateSession) (*CupUpdateSessionReply, error) {
	out := new(CupUpdateSessionReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}
