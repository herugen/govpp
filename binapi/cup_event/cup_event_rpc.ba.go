// Code generated by GoVPP's binapi-generator. DO NOT EDIT.

package cup_event

import (
	"context"

	api "go.fd.io/govpp/api"
)

// RPCService defines RPC service cup_event.
type RPCService interface {
	WantDownlinkEvents(ctx context.Context, in *WantDownlinkEvents) (*WantDownlinkEventsReply, error)
	WantFirstPktEvents(ctx context.Context, in *WantFirstPktEvents) (*WantFirstPktEventsReply, error)
	WantInactivityEvents(ctx context.Context, in *WantInactivityEvents) (*WantInactivityEventsReply, error)
	WantMeasureEvents(ctx context.Context, in *WantMeasureEvents) (*WantMeasureEventsReply, error)
}

type serviceClient struct {
	conn api.Connection
}

func NewServiceClient(conn api.Connection) RPCService {
	return &serviceClient{conn}
}

func (c *serviceClient) WantDownlinkEvents(ctx context.Context, in *WantDownlinkEvents) (*WantDownlinkEventsReply, error) {
	out := new(WantDownlinkEventsReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) WantFirstPktEvents(ctx context.Context, in *WantFirstPktEvents) (*WantFirstPktEventsReply, error) {
	out := new(WantFirstPktEventsReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) WantInactivityEvents(ctx context.Context, in *WantInactivityEvents) (*WantInactivityEventsReply, error) {
	out := new(WantInactivityEventsReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}

func (c *serviceClient) WantMeasureEvents(ctx context.Context, in *WantMeasureEvents) (*WantMeasureEventsReply, error) {
	out := new(WantMeasureEventsReply)
	err := c.conn.Invoke(ctx, in, out)
	if err != nil {
		return nil, err
	}
	return out, api.RetvalToVPPApiError(out.Retval)
}
