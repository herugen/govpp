// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.9.0-dev
//  VPP:              22.10.1-1~g1b93285ce
// source: plugins/cup_event.api.json

// Package cup_event contains generated bindings for API file cup_event.api.
//
// Contents:
// -  1 enum
// -  5 structs
// - 12 messages
package cup_event

import (
	"strconv"

	api "go.fd.io/govpp/api"
	codec "go.fd.io/govpp/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "cup_event"
	APIVersion = ""
	VersionCrc = 0x5157dc10
)

// Trigger defines enum 'trigger'.
type Trigger uint8

const (
	CUP_TR_THRESH Trigger = 0
	CUP_TR_QUOTA  Trigger = 1
	CUP_TR_LINKED Trigger = 2
)

var (
	Trigger_name = map[uint8]string{
		0: "CUP_TR_THRESH",
		1: "CUP_TR_QUOTA",
		2: "CUP_TR_LINKED",
	}
	Trigger_value = map[string]uint8{
		"CUP_TR_THRESH": 0,
		"CUP_TR_QUOTA":  1,
		"CUP_TR_LINKED": 2,
	}
)

func (x Trigger) String() string {
	s, ok := Trigger_name[uint8(x)]
	if ok {
		return s
	}
	return "Trigger(" + strconv.Itoa(int(x)) + ")"
}

// Counter defines type 'counter'.
type Counter struct {
	Bytes uint64 `binapi:"u64,name=bytes" json:"bytes,omitempty"`
	Pkts  uint64 `binapi:"u64,name=pkts" json:"pkts,omitempty"`
}

// Downlink defines type 'downlink'.
type Downlink struct {
	Sid uint64 `binapi:"u64,name=sid" json:"sid,omitempty"`
	Fid uint16 `binapi:"u16,name=fid" json:"fid,omitempty"`
	Ppi uint8  `binapi:"u8,name=ppi" json:"ppi,omitempty"`
	Qfi uint8  `binapi:"u8,name=qfi" json:"qfi,omitempty"`
}

// FirstPkt defines type 'first_pkt'.
type FirstPkt struct {
	Sid       uint64  `binapi:"u64,name=sid" json:"sid,omitempty"`
	FirstTime float64 `binapi:"f64,name=first_time" json:"first_time,omitempty"`
}

// Inactivity defines type 'inactivity'.
type Inactivity struct {
	Sid      uint64  `binapi:"u64,name=sid" json:"sid,omitempty"`
	LastTime float64 `binapi:"f64,name=last_time" json:"last_time,omitempty"`
}

// Measurement defines type 'measurement'.
type Measurement struct {
	ID        uint16  `binapi:"u16,name=id" json:"id,omitempty"`
	Tr        Trigger `binapi:"trigger,name=tr" json:"tr,omitempty"`
	Sid       uint64  `binapi:"u64,name=sid" json:"sid,omitempty"`
	Ul        Counter `binapi:"counter,name=ul" json:"ul,omitempty"`
	Dl        Counter `binapi:"counter,name=dl" json:"dl,omitempty"`
	Total     Counter `binapi:"counter,name=total" json:"total,omitempty"`
	FirstTime float64 `binapi:"f64,name=first_time" json:"first_time,omitempty"`
	LastTime  float64 `binapi:"f64,name=last_time" json:"last_time,omitempty"`
}

// DownlinkEvent defines message 'downlink_event'.
type DownlinkEvent struct {
	PID      uint32     `binapi:"u32,name=pid" json:"pid,omitempty"`
	Count    uint16     `binapi:"u16,name=count" json:"-"`
	Downlink []Downlink `binapi:"downlink[count],name=downlink" json:"downlink,omitempty"`
}

func (m *DownlinkEvent) Reset()               { *m = DownlinkEvent{} }
func (*DownlinkEvent) GetMessageName() string { return "downlink_event" }
func (*DownlinkEvent) GetCrcString() string   { return "68b6e832" }
func (*DownlinkEvent) GetMessageType() api.MessageType {
	return api.EventMessage
}

func (m *DownlinkEvent) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.PID
	size += 2 // m.Count
	for j1 := 0; j1 < len(m.Downlink); j1++ {
		var s1 Downlink
		_ = s1
		if j1 < len(m.Downlink) {
			s1 = m.Downlink[j1]
		}
		size += 8 // s1.Sid
		size += 2 // s1.Fid
		size += 1 // s1.Ppi
		size += 1 // s1.Qfi
	}
	return size
}
func (m *DownlinkEvent) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.PID)
	buf.EncodeUint16(uint16(len(m.Downlink)))
	for j0 := 0; j0 < len(m.Downlink); j0++ {
		var v0 Downlink // Downlink
		if j0 < len(m.Downlink) {
			v0 = m.Downlink[j0]
		}
		buf.EncodeUint64(v0.Sid)
		buf.EncodeUint16(v0.Fid)
		buf.EncodeUint8(v0.Ppi)
		buf.EncodeUint8(v0.Qfi)
	}
	return buf.Bytes(), nil
}
func (m *DownlinkEvent) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PID = buf.DecodeUint32()
	m.Count = buf.DecodeUint16()
	m.Downlink = make([]Downlink, m.Count)
	for j0 := 0; j0 < len(m.Downlink); j0++ {
		m.Downlink[j0].Sid = buf.DecodeUint64()
		m.Downlink[j0].Fid = buf.DecodeUint16()
		m.Downlink[j0].Ppi = buf.DecodeUint8()
		m.Downlink[j0].Qfi = buf.DecodeUint8()
	}
	return nil
}

// FirstPktEvent defines message 'first_pkt_event'.
type FirstPktEvent struct {
	PID      uint32     `binapi:"u32,name=pid" json:"pid,omitempty"`
	Count    uint16     `binapi:"u16,name=count" json:"-"`
	FirstPkt []FirstPkt `binapi:"first_pkt[count],name=first_pkt" json:"first_pkt,omitempty"`
}

func (m *FirstPktEvent) Reset()               { *m = FirstPktEvent{} }
func (*FirstPktEvent) GetMessageName() string { return "first_pkt_event" }
func (*FirstPktEvent) GetCrcString() string   { return "60cecf1b" }
func (*FirstPktEvent) GetMessageType() api.MessageType {
	return api.EventMessage
}

func (m *FirstPktEvent) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.PID
	size += 2 // m.Count
	for j1 := 0; j1 < len(m.FirstPkt); j1++ {
		var s1 FirstPkt
		_ = s1
		if j1 < len(m.FirstPkt) {
			s1 = m.FirstPkt[j1]
		}
		size += 8 // s1.Sid
		size += 8 // s1.FirstTime
	}
	return size
}
func (m *FirstPktEvent) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.PID)
	buf.EncodeUint16(uint16(len(m.FirstPkt)))
	for j0 := 0; j0 < len(m.FirstPkt); j0++ {
		var v0 FirstPkt // FirstPkt
		if j0 < len(m.FirstPkt) {
			v0 = m.FirstPkt[j0]
		}
		buf.EncodeUint64(v0.Sid)
		buf.EncodeFloat64(v0.FirstTime)
	}
	return buf.Bytes(), nil
}
func (m *FirstPktEvent) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PID = buf.DecodeUint32()
	m.Count = buf.DecodeUint16()
	m.FirstPkt = make([]FirstPkt, m.Count)
	for j0 := 0; j0 < len(m.FirstPkt); j0++ {
		m.FirstPkt[j0].Sid = buf.DecodeUint64()
		m.FirstPkt[j0].FirstTime = buf.DecodeFloat64()
	}
	return nil
}

// InactivityEvent defines message 'inactivity_event'.
type InactivityEvent struct {
	PID        uint32       `binapi:"u32,name=pid" json:"pid,omitempty"`
	Count      uint16       `binapi:"u16,name=count" json:"-"`
	Inactivity []Inactivity `binapi:"inactivity[count],name=inactivity" json:"inactivity,omitempty"`
}

func (m *InactivityEvent) Reset()               { *m = InactivityEvent{} }
func (*InactivityEvent) GetMessageName() string { return "inactivity_event" }
func (*InactivityEvent) GetCrcString() string   { return "ae134c94" }
func (*InactivityEvent) GetMessageType() api.MessageType {
	return api.EventMessage
}

func (m *InactivityEvent) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.PID
	size += 2 // m.Count
	for j1 := 0; j1 < len(m.Inactivity); j1++ {
		var s1 Inactivity
		_ = s1
		if j1 < len(m.Inactivity) {
			s1 = m.Inactivity[j1]
		}
		size += 8 // s1.Sid
		size += 8 // s1.LastTime
	}
	return size
}
func (m *InactivityEvent) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.PID)
	buf.EncodeUint16(uint16(len(m.Inactivity)))
	for j0 := 0; j0 < len(m.Inactivity); j0++ {
		var v0 Inactivity // Inactivity
		if j0 < len(m.Inactivity) {
			v0 = m.Inactivity[j0]
		}
		buf.EncodeUint64(v0.Sid)
		buf.EncodeFloat64(v0.LastTime)
	}
	return buf.Bytes(), nil
}
func (m *InactivityEvent) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PID = buf.DecodeUint32()
	m.Count = buf.DecodeUint16()
	m.Inactivity = make([]Inactivity, m.Count)
	for j0 := 0; j0 < len(m.Inactivity); j0++ {
		m.Inactivity[j0].Sid = buf.DecodeUint64()
		m.Inactivity[j0].LastTime = buf.DecodeFloat64()
	}
	return nil
}

// MeasureEvent defines message 'measure_event'.
type MeasureEvent struct {
	PID         uint32        `binapi:"u32,name=pid" json:"pid,omitempty"`
	Count       uint16        `binapi:"u16,name=count" json:"-"`
	Measurement []Measurement `binapi:"measurement[count],name=measurement" json:"measurement,omitempty"`
}

func (m *MeasureEvent) Reset()               { *m = MeasureEvent{} }
func (*MeasureEvent) GetMessageName() string { return "measure_event" }
func (*MeasureEvent) GetCrcString() string   { return "24bd8120" }
func (*MeasureEvent) GetMessageType() api.MessageType {
	return api.EventMessage
}

func (m *MeasureEvent) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.PID
	size += 2 // m.Count
	for j1 := 0; j1 < len(m.Measurement); j1++ {
		var s1 Measurement
		_ = s1
		if j1 < len(m.Measurement) {
			s1 = m.Measurement[j1]
		}
		size += 2 // s1.ID
		size += 1 // s1.Tr
		size += 8 // s1.Sid
		size += 8 // s1.Ul.Bytes
		size += 8 // s1.Ul.Pkts
		size += 8 // s1.Dl.Bytes
		size += 8 // s1.Dl.Pkts
		size += 8 // s1.Total.Bytes
		size += 8 // s1.Total.Pkts
		size += 8 // s1.FirstTime
		size += 8 // s1.LastTime
	}
	return size
}
func (m *MeasureEvent) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(m.PID)
	buf.EncodeUint16(uint16(len(m.Measurement)))
	for j0 := 0; j0 < len(m.Measurement); j0++ {
		var v0 Measurement // Measurement
		if j0 < len(m.Measurement) {
			v0 = m.Measurement[j0]
		}
		buf.EncodeUint16(v0.ID)
		buf.EncodeUint8(uint8(v0.Tr))
		buf.EncodeUint64(v0.Sid)
		buf.EncodeUint64(v0.Ul.Bytes)
		buf.EncodeUint64(v0.Ul.Pkts)
		buf.EncodeUint64(v0.Dl.Bytes)
		buf.EncodeUint64(v0.Dl.Pkts)
		buf.EncodeUint64(v0.Total.Bytes)
		buf.EncodeUint64(v0.Total.Pkts)
		buf.EncodeFloat64(v0.FirstTime)
		buf.EncodeFloat64(v0.LastTime)
	}
	return buf.Bytes(), nil
}
func (m *MeasureEvent) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.PID = buf.DecodeUint32()
	m.Count = buf.DecodeUint16()
	m.Measurement = make([]Measurement, m.Count)
	for j0 := 0; j0 < len(m.Measurement); j0++ {
		m.Measurement[j0].ID = buf.DecodeUint16()
		m.Measurement[j0].Tr = Trigger(buf.DecodeUint8())
		m.Measurement[j0].Sid = buf.DecodeUint64()
		m.Measurement[j0].Ul.Bytes = buf.DecodeUint64()
		m.Measurement[j0].Ul.Pkts = buf.DecodeUint64()
		m.Measurement[j0].Dl.Bytes = buf.DecodeUint64()
		m.Measurement[j0].Dl.Pkts = buf.DecodeUint64()
		m.Measurement[j0].Total.Bytes = buf.DecodeUint64()
		m.Measurement[j0].Total.Pkts = buf.DecodeUint64()
		m.Measurement[j0].FirstTime = buf.DecodeFloat64()
		m.Measurement[j0].LastTime = buf.DecodeFloat64()
	}
	return nil
}

// WantDownlinkEvents defines message 'want_downlink_events'.
type WantDownlinkEvents struct {
	EnableDisable bool   `binapi:"bool,name=enable_disable" json:"enable_disable,omitempty"`
	PID           uint32 `binapi:"u32,name=pid" json:"pid,omitempty"`
}

func (m *WantDownlinkEvents) Reset()               { *m = WantDownlinkEvents{} }
func (*WantDownlinkEvents) GetMessageName() string { return "want_downlink_events" }
func (*WantDownlinkEvents) GetCrcString() string   { return "c5e2af94" }
func (*WantDownlinkEvents) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *WantDownlinkEvents) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.EnableDisable
	size += 4 // m.PID
	return size
}
func (m *WantDownlinkEvents) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.EnableDisable)
	buf.EncodeUint32(m.PID)
	return buf.Bytes(), nil
}
func (m *WantDownlinkEvents) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.EnableDisable = buf.DecodeBool()
	m.PID = buf.DecodeUint32()
	return nil
}

// WantDownlinkEventsReply defines message 'want_downlink_events_reply'.
type WantDownlinkEventsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *WantDownlinkEventsReply) Reset()               { *m = WantDownlinkEventsReply{} }
func (*WantDownlinkEventsReply) GetMessageName() string { return "want_downlink_events_reply" }
func (*WantDownlinkEventsReply) GetCrcString() string   { return "e8d4e804" }
func (*WantDownlinkEventsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *WantDownlinkEventsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *WantDownlinkEventsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *WantDownlinkEventsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// WantFirstPktEvents defines message 'want_first_pkt_events'.
type WantFirstPktEvents struct {
	EnableDisable bool   `binapi:"bool,name=enable_disable" json:"enable_disable,omitempty"`
	PID           uint32 `binapi:"u32,name=pid" json:"pid,omitempty"`
}

func (m *WantFirstPktEvents) Reset()               { *m = WantFirstPktEvents{} }
func (*WantFirstPktEvents) GetMessageName() string { return "want_first_pkt_events" }
func (*WantFirstPktEvents) GetCrcString() string   { return "c5e2af94" }
func (*WantFirstPktEvents) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *WantFirstPktEvents) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.EnableDisable
	size += 4 // m.PID
	return size
}
func (m *WantFirstPktEvents) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.EnableDisable)
	buf.EncodeUint32(m.PID)
	return buf.Bytes(), nil
}
func (m *WantFirstPktEvents) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.EnableDisable = buf.DecodeBool()
	m.PID = buf.DecodeUint32()
	return nil
}

// WantFirstPktEventsReply defines message 'want_first_pkt_events_reply'.
type WantFirstPktEventsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *WantFirstPktEventsReply) Reset()               { *m = WantFirstPktEventsReply{} }
func (*WantFirstPktEventsReply) GetMessageName() string { return "want_first_pkt_events_reply" }
func (*WantFirstPktEventsReply) GetCrcString() string   { return "e8d4e804" }
func (*WantFirstPktEventsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *WantFirstPktEventsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *WantFirstPktEventsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *WantFirstPktEventsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// WantInactivityEvents defines message 'want_inactivity_events'.
type WantInactivityEvents struct {
	EnableDisable bool   `binapi:"bool,name=enable_disable" json:"enable_disable,omitempty"`
	PID           uint32 `binapi:"u32,name=pid" json:"pid,omitempty"`
}

func (m *WantInactivityEvents) Reset()               { *m = WantInactivityEvents{} }
func (*WantInactivityEvents) GetMessageName() string { return "want_inactivity_events" }
func (*WantInactivityEvents) GetCrcString() string   { return "c5e2af94" }
func (*WantInactivityEvents) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *WantInactivityEvents) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.EnableDisable
	size += 4 // m.PID
	return size
}
func (m *WantInactivityEvents) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.EnableDisable)
	buf.EncodeUint32(m.PID)
	return buf.Bytes(), nil
}
func (m *WantInactivityEvents) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.EnableDisable = buf.DecodeBool()
	m.PID = buf.DecodeUint32()
	return nil
}

// WantInactivityEventsReply defines message 'want_inactivity_events_reply'.
type WantInactivityEventsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *WantInactivityEventsReply) Reset()               { *m = WantInactivityEventsReply{} }
func (*WantInactivityEventsReply) GetMessageName() string { return "want_inactivity_events_reply" }
func (*WantInactivityEventsReply) GetCrcString() string   { return "e8d4e804" }
func (*WantInactivityEventsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *WantInactivityEventsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *WantInactivityEventsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *WantInactivityEventsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

// WantMeasureEvents defines message 'want_measure_events'.
type WantMeasureEvents struct {
	EnableDisable bool   `binapi:"bool,name=enable_disable" json:"enable_disable,omitempty"`
	PID           uint32 `binapi:"u32,name=pid" json:"pid,omitempty"`
}

func (m *WantMeasureEvents) Reset()               { *m = WantMeasureEvents{} }
func (*WantMeasureEvents) GetMessageName() string { return "want_measure_events" }
func (*WantMeasureEvents) GetCrcString() string   { return "c5e2af94" }
func (*WantMeasureEvents) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *WantMeasureEvents) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 1 // m.EnableDisable
	size += 4 // m.PID
	return size
}
func (m *WantMeasureEvents) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeBool(m.EnableDisable)
	buf.EncodeUint32(m.PID)
	return buf.Bytes(), nil
}
func (m *WantMeasureEvents) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.EnableDisable = buf.DecodeBool()
	m.PID = buf.DecodeUint32()
	return nil
}

// WantMeasureEventsReply defines message 'want_measure_events_reply'.
type WantMeasureEventsReply struct {
	Retval int32 `binapi:"i32,name=retval" json:"retval,omitempty"`
}

func (m *WantMeasureEventsReply) Reset()               { *m = WantMeasureEventsReply{} }
func (*WantMeasureEventsReply) GetMessageName() string { return "want_measure_events_reply" }
func (*WantMeasureEventsReply) GetCrcString() string   { return "e8d4e804" }
func (*WantMeasureEventsReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *WantMeasureEventsReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Retval
	return size
}
func (m *WantMeasureEventsReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	return buf.Bytes(), nil
}
func (m *WantMeasureEventsReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	return nil
}

func init() { file_cup_event_binapi_init() }
func file_cup_event_binapi_init() {
	api.RegisterMessage((*DownlinkEvent)(nil), "downlink_event_68b6e832")
	api.RegisterMessage((*FirstPktEvent)(nil), "first_pkt_event_60cecf1b")
	api.RegisterMessage((*InactivityEvent)(nil), "inactivity_event_ae134c94")
	api.RegisterMessage((*MeasureEvent)(nil), "measure_event_24bd8120")
	api.RegisterMessage((*WantDownlinkEvents)(nil), "want_downlink_events_c5e2af94")
	api.RegisterMessage((*WantDownlinkEventsReply)(nil), "want_downlink_events_reply_e8d4e804")
	api.RegisterMessage((*WantFirstPktEvents)(nil), "want_first_pkt_events_c5e2af94")
	api.RegisterMessage((*WantFirstPktEventsReply)(nil), "want_first_pkt_events_reply_e8d4e804")
	api.RegisterMessage((*WantInactivityEvents)(nil), "want_inactivity_events_c5e2af94")
	api.RegisterMessage((*WantInactivityEventsReply)(nil), "want_inactivity_events_reply_e8d4e804")
	api.RegisterMessage((*WantMeasureEvents)(nil), "want_measure_events_c5e2af94")
	api.RegisterMessage((*WantMeasureEventsReply)(nil), "want_measure_events_reply_e8d4e804")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*DownlinkEvent)(nil),
		(*FirstPktEvent)(nil),
		(*InactivityEvent)(nil),
		(*MeasureEvent)(nil),
		(*WantDownlinkEvents)(nil),
		(*WantDownlinkEventsReply)(nil),
		(*WantFirstPktEvents)(nil),
		(*WantFirstPktEventsReply)(nil),
		(*WantInactivityEvents)(nil),
		(*WantInactivityEventsReply)(nil),
		(*WantMeasureEvents)(nil),
		(*WantMeasureEventsReply)(nil),
	}
}
