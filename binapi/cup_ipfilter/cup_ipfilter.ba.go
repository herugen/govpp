// Code generated by GoVPP's binapi-generator. DO NOT EDIT.
// versions:
//  binapi-generator: v0.5.0-dev
//  VPP:              23.10-rc0~39-gcdf73b973

// Package cup_ipfilter contains generated bindings for API file cup_ipfilter.api.
//
// Contents:
//
//	1 struct
//	4 messages
package cup_ipfilter

import (
	_ "acl_types"
	_ "ethernet_types"
	_ "interface_types"
	"ip_types"

	api "git.fd.io/govpp.git/api"
	codec "git.fd.io/govpp.git/codec"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the GoVPP api package it is being compiled against.
// A compilation error at this line likely means your copy of the
// GoVPP api package needs to be updated.
const _ = api.GoVppAPIPackageIsVersion2

const (
	APIFile    = "cup_ipfilter"
	APIVersion = "0.0.1"
	VersionCrc = 0x1b0519c3
)

// IPFilter defines type 'ip_filter'.
type IPFilter struct {
	ID           uint64          `binapi:"u64,name=id" json:"id,omitempty"`
	Proto        uint8           `binapi:"u8,name=proto" json:"proto,omitempty"`
	SrcPrefix    ip_types.Prefix `binapi:"prefix,name=src_prefix" json:"src_prefix,omitempty"`
	DstPrefix    ip_types.Prefix `binapi:"prefix,name=dst_prefix" json:"dst_prefix,omitempty"`
	SrcportFirst uint16          `binapi:"u16,name=srcport_first" json:"srcport_first,omitempty"`
	SrcportLast  uint16          `binapi:"u16,name=srcport_last" json:"srcport_last,omitempty"`
	DstportFirst uint16          `binapi:"u16,name=dstport_first" json:"dstport_first,omitempty"`
	DstportLast  uint16          `binapi:"u16,name=dstport_last" json:"dstport_last,omitempty"`
}

// CupAddIPFilterPol defines message 'cup_add_ip_filter_pol'.
// InProgress: the message form may change in the future versions
type CupAddIPFilterPol struct {
	Count   uint32     `binapi:"u32,name=count" json:"-"`
	Filters []IPFilter `binapi:"ip_filter[count],name=filters" json:"filters,omitempty"`
}

func (m *CupAddIPFilterPol) Reset()               { *m = CupAddIPFilterPol{} }
func (*CupAddIPFilterPol) GetMessageName() string { return "cup_add_ip_filter_pol" }
func (*CupAddIPFilterPol) GetCrcString() string   { return "c80357f3" }
func (*CupAddIPFilterPol) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CupAddIPFilterPol) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4 // m.Count
	for j1 := 0; j1 < len(m.Filters); j1++ {
		var s1 IPFilter
		_ = s1
		if j1 < len(m.Filters) {
			s1 = m.Filters[j1]
		}
		size += 8      // s1.ID
		size += 1      // s1.Proto
		size += 1      // s1.SrcPrefix.Address.Af
		size += 1 * 16 // s1.SrcPrefix.Address.Un
		size += 1      // s1.SrcPrefix.Len
		size += 1      // s1.DstPrefix.Address.Af
		size += 1 * 16 // s1.DstPrefix.Address.Un
		size += 1      // s1.DstPrefix.Len
		size += 2      // s1.SrcportFirst
		size += 2      // s1.SrcportLast
		size += 2      // s1.DstportFirst
		size += 2      // s1.DstportLast
	}
	return size
}
func (m *CupAddIPFilterPol) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(len(m.Filters)))
	for j0 := 0; j0 < len(m.Filters); j0++ {
		var v0 IPFilter // Filters
		if j0 < len(m.Filters) {
			v0 = m.Filters[j0]
		}
		buf.EncodeUint64(v0.ID)
		buf.EncodeUint8(v0.Proto)
		buf.EncodeUint8(uint8(v0.SrcPrefix.Address.Af))
		buf.EncodeBytes(v0.SrcPrefix.Address.Un.XXX_UnionData[:], 16)
		buf.EncodeUint8(v0.SrcPrefix.Len)
		buf.EncodeUint8(uint8(v0.DstPrefix.Address.Af))
		buf.EncodeBytes(v0.DstPrefix.Address.Un.XXX_UnionData[:], 16)
		buf.EncodeUint8(v0.DstPrefix.Len)
		buf.EncodeUint16(v0.SrcportFirst)
		buf.EncodeUint16(v0.SrcportLast)
		buf.EncodeUint16(v0.DstportFirst)
		buf.EncodeUint16(v0.DstportLast)
	}
	return buf.Bytes(), nil
}
func (m *CupAddIPFilterPol) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Count = buf.DecodeUint32()
	m.Filters = make([]IPFilter, m.Count)
	for j0 := 0; j0 < len(m.Filters); j0++ {
		m.Filters[j0].ID = buf.DecodeUint64()
		m.Filters[j0].Proto = buf.DecodeUint8()
		m.Filters[j0].SrcPrefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Filters[j0].SrcPrefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Filters[j0].SrcPrefix.Len = buf.DecodeUint8()
		m.Filters[j0].DstPrefix.Address.Af = ip_types.AddressFamily(buf.DecodeUint8())
		copy(m.Filters[j0].DstPrefix.Address.Un.XXX_UnionData[:], buf.DecodeBytes(16))
		m.Filters[j0].DstPrefix.Len = buf.DecodeUint8()
		m.Filters[j0].SrcportFirst = buf.DecodeUint16()
		m.Filters[j0].SrcportLast = buf.DecodeUint16()
		m.Filters[j0].DstportFirst = buf.DecodeUint16()
		m.Filters[j0].DstportLast = buf.DecodeUint16()
	}
	return nil
}

// CupAddIPFilterPolReply defines message 'cup_add_ip_filter_pol_reply'.
// InProgress: the message form may change in the future versions
type CupAddIPFilterPolReply struct {
	Retval    int32    `binapi:"i32,name=retval" json:"retval,omitempty"`
	Count     uint32   `binapi:"u32,name=count" json:"-"`
	FailedIds []uint64 `binapi:"u64[count],name=failed_ids" json:"failed_ids,omitempty"`
}

func (m *CupAddIPFilterPolReply) Reset()               { *m = CupAddIPFilterPolReply{} }
func (*CupAddIPFilterPolReply) GetMessageName() string { return "cup_add_ip_filter_pol_reply" }
func (*CupAddIPFilterPolReply) GetCrcString() string   { return "071e230c" }
func (*CupAddIPFilterPolReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CupAddIPFilterPolReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                    // m.Retval
	size += 4                    // m.Count
	size += 8 * len(m.FailedIds) // m.FailedIds
	return size
}
func (m *CupAddIPFilterPolReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.FailedIds)))
	for i := 0; i < len(m.FailedIds); i++ {
		var x uint64
		if i < len(m.FailedIds) {
			x = uint64(m.FailedIds[i])
		}
		buf.EncodeUint64(x)
	}
	return buf.Bytes(), nil
}
func (m *CupAddIPFilterPolReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Count = buf.DecodeUint32()
	m.FailedIds = make([]uint64, m.Count)
	for i := 0; i < len(m.FailedIds); i++ {
		m.FailedIds[i] = buf.DecodeUint64()
	}
	return nil
}

// CupDelIPFilterPol defines message 'cup_del_ip_filter_pol'.
// InProgress: the message form may change in the future versions
type CupDelIPFilterPol struct {
	Count uint32   `binapi:"u32,name=count" json:"-"`
	Ids   []uint64 `binapi:"u64[count],name=ids" json:"ids,omitempty"`
}

func (m *CupDelIPFilterPol) Reset()               { *m = CupDelIPFilterPol{} }
func (*CupDelIPFilterPol) GetMessageName() string { return "cup_del_ip_filter_pol" }
func (*CupDelIPFilterPol) GetCrcString() string   { return "bbc39971" }
func (*CupDelIPFilterPol) GetMessageType() api.MessageType {
	return api.RequestMessage
}

func (m *CupDelIPFilterPol) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4              // m.Count
	size += 8 * len(m.Ids) // m.Ids
	return size
}
func (m *CupDelIPFilterPol) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeUint32(uint32(len(m.Ids)))
	for i := 0; i < len(m.Ids); i++ {
		var x uint64
		if i < len(m.Ids) {
			x = uint64(m.Ids[i])
		}
		buf.EncodeUint64(x)
	}
	return buf.Bytes(), nil
}
func (m *CupDelIPFilterPol) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Count = buf.DecodeUint32()
	m.Ids = make([]uint64, m.Count)
	for i := 0; i < len(m.Ids); i++ {
		m.Ids[i] = buf.DecodeUint64()
	}
	return nil
}

// CupDelIPFilterPolReply defines message 'cup_del_ip_filter_pol_reply'.
// InProgress: the message form may change in the future versions
type CupDelIPFilterPolReply struct {
	Retval    int32    `binapi:"i32,name=retval" json:"retval,omitempty"`
	Count     uint32   `binapi:"u32,name=count" json:"-"`
	FailedIds []uint64 `binapi:"u64[count],name=failed_ids" json:"failed_ids,omitempty"`
}

func (m *CupDelIPFilterPolReply) Reset()               { *m = CupDelIPFilterPolReply{} }
func (*CupDelIPFilterPolReply) GetMessageName() string { return "cup_del_ip_filter_pol_reply" }
func (*CupDelIPFilterPolReply) GetCrcString() string   { return "071e230c" }
func (*CupDelIPFilterPolReply) GetMessageType() api.MessageType {
	return api.ReplyMessage
}

func (m *CupDelIPFilterPolReply) Size() (size int) {
	if m == nil {
		return 0
	}
	size += 4                    // m.Retval
	size += 4                    // m.Count
	size += 8 * len(m.FailedIds) // m.FailedIds
	return size
}
func (m *CupDelIPFilterPolReply) Marshal(b []byte) ([]byte, error) {
	if b == nil {
		b = make([]byte, m.Size())
	}
	buf := codec.NewBuffer(b)
	buf.EncodeInt32(m.Retval)
	buf.EncodeUint32(uint32(len(m.FailedIds)))
	for i := 0; i < len(m.FailedIds); i++ {
		var x uint64
		if i < len(m.FailedIds) {
			x = uint64(m.FailedIds[i])
		}
		buf.EncodeUint64(x)
	}
	return buf.Bytes(), nil
}
func (m *CupDelIPFilterPolReply) Unmarshal(b []byte) error {
	buf := codec.NewBuffer(b)
	m.Retval = buf.DecodeInt32()
	m.Count = buf.DecodeUint32()
	m.FailedIds = make([]uint64, m.Count)
	for i := 0; i < len(m.FailedIds); i++ {
		m.FailedIds[i] = buf.DecodeUint64()
	}
	return nil
}

func init() { file_cup_ipfilter_binapi_init() }
func file_cup_ipfilter_binapi_init() {
	api.RegisterMessage((*CupAddIPFilterPol)(nil), "cup_add_ip_filter_pol_c80357f3")
	api.RegisterMessage((*CupAddIPFilterPolReply)(nil), "cup_add_ip_filter_pol_reply_071e230c")
	api.RegisterMessage((*CupDelIPFilterPol)(nil), "cup_del_ip_filter_pol_bbc39971")
	api.RegisterMessage((*CupDelIPFilterPolReply)(nil), "cup_del_ip_filter_pol_reply_071e230c")
}

// Messages returns list of all messages in this module.
func AllMessages() []api.Message {
	return []api.Message{
		(*CupAddIPFilterPol)(nil),
		(*CupAddIPFilterPolReply)(nil),
		(*CupDelIPFilterPol)(nil),
		(*CupDelIPFilterPolReply)(nil),
	}
}
